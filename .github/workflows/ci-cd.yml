name: CI/CD 파이프라인

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  audio-record:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'audio-record') || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python & Node for audio-record
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: 의존성 확인
      run: |
        cd audio-record
        pip install -r requirements.txt

    - name: 프론트엔드 관리
      run: |
        cd audio-record
        mkdir -p www

    - name: ngrok 설치
      run: |
        wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar xvzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
    
    - name: 애플리케이션 실행 및 ngrok 터널 열기
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      run: |
        ./ngrok config add-authtoken $NGROK_AUTH_TOKEN
        cd audio-record
        python app.py &
        sleep 5
        ../ngrok http 3000 --log=stdout > ngrok.log &
        sleep 5
        NGROK_URL=$(grep -o 'https://.*\.ngrok-free\.app' ngrok.log | head -n 1)
        echo "애플리케이션이 다음 URL에서 1분간 접속 가능합니다: $NGROK_URL"
        echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
    
    - name: 테스트 URL 출력
      run: |
        echo "애플리케이션 URL: ${{ env.NGROK_URL }}"
        echo "1분 후 URL은 만료됩니다. 테스트를 서둘러 진행해 주세요."
        sleep 60

  youtube-search:
    need: audio-record
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'youtube-search') || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v2
    - name: 의존성 확인
      run: |
        cd youtube-search
        pip install -r requirements.txt

    - name: 프론트엔드 관리
      run: |
        cd youtube-search
        mkdir -p www

    - name: ngrok 설치
      run: |
        wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar xvzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
    
    - name: 애플리케이션 실행 및 ngrok 터널 열기
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      run: |
        ./ngrok config add-authtoken $NGROK_AUTH_TOKEN
        cd youtube-search
        python app.py &
        sleep 5
        ../ngrok http 3000 --log=stdout > ngrok.log &
        sleep 5
        NGROK_URL=$(grep -o 'https://.*\.ngrok-free\.app' ngrok.log | head -n 1)
        echo "애플리케이션이 다음 URL에서 1분간 접속 가능합니다: $NGROK_URL"
        echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
    
    - name: 테스트 URL 출력
      run: |
        echo "애플리케이션 URL: ${{ env.NGROK_URL }}"
        echo "1분 후 URL은 만료됩니다. 테스트를 서둘러 진행해 주세요."
        sleep 60
    
  face-recog:
    need: youtube-search
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'face-recog') || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v2
    - name: 의존성 확인
      run: |
        cd face-recog
        pip install -r requirements.txt


    - name: 프론트엔드 관리
      run: |
        cd face-recog
        mkdir -p www

    - name: ngrok 설치
      run: |
        wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar xvzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
    
    - name: 애플리케이션 실행 및 ngrok 터널 열기
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      run: |
        ./ngrok config add-authtoken $NGROK_AUTH_TOKEN
        cd face-recog
        python app.py &
        sleep 5
        ../ngrok http 3000 --log=stdout > ngrok.log &
        sleep 5
        NGROK_URL=$(grep -o 'https://.*\.ngrok-free\.app' ngrok.log | head -n 1)
        echo "애플리케이션이 다음 URL에서 1분간 접속 가능합니다: $NGROK_URL"
        echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
    
    - name: 테스트 URL 출력
      run: |
        echo "애플리케이션 URL: ${{ env.NGROK_URL }}"
        echo "1분 후 URL은 만료됩니다. 테스트를 서둘러 진행해 주세요."
        sleep 60
